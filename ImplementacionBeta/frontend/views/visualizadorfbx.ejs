<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Visualizador FBX</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/fflate@0.7.4/umd/index.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/FBXLoader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background-color: #f5f5f5;
    }
    h2 {
      text-align: center;
      padding: 10px;
    }
    #canvas-container {
      width: 60vw;
      height: 70vh;
      margin: 0 auto;
      border: 1px solid #aaa;
      overflow: hidden;
    }
    #boton-superior {
      position: absolute;
      top: 40px;
      left: 60px;
      padding: 8px 12px;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      z-index: 10;
      text-decoration: none;
      display: inline-block;
    }

    #boton-inferior {
      position: absolute;
      bottom: 220px;
      right: 30px;
      padding: 8px 12px;
      background-color: #41a0fa;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      z-index: 10;
    }
    #boton-descarga {
      position: absolute;
      bottom: 160px;
      right: 30px;
      padding: 8px 12px;
      background-color: #e74c3c;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      z-index: 10;
    }
  </style>
</head>
<body>
  <h2><%= nameSculture %></h2>
  <div id="canvas-container">
    <canvas id="webgl-canvas"></canvas>
  </div>
  <a href="/principal" id="boton-superior" >Regresar</a>
  <button id="boton-inferior">Historial de datos ambientales</button>
  <button id="boton-descarga">Acervo documentario</button>

  <script>
    // Variables pasadas desde el backend
    const fbxPath = "<%= fbxUrl %>";
    const texturePath = "<%= textureUrl %>";

    let scene, camera, renderer, modelGroup, controls;
    let baseDistance = 8; // Se ajusta al cargar el modelo

    init3D();
    loadFBX(fbxPath, texturePath);

    function init3D() {
      const container = document.getElementById('canvas-container');
      const width = container.clientWidth;
      const height = container.clientHeight;

      scene = new THREE.Scene();
      scene.background = new THREE.Color(0xeeeeee);

      camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 2000);
      // La posición de la cámara se ajustará al cargar el modelo
      camera.position.set(0, 2, baseDistance);
      camera.lookAt(new THREE.Vector3(0, 0, 0));

      renderer = new THREE.WebGLRenderer({
        canvas: document.getElementById('webgl-canvas'),
        antialias: true
      });
      renderer.setSize(width, height);

      // Iluminación
      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
      directionalLight.position.set(0, 10, 10);
      scene.add(directionalLight);

      const ambientLight = new THREE.AmbientLight(0x888888);
      scene.add(ambientLight);

      // Grupo contenedor del modelo
      modelGroup = new THREE.Group();
      scene.add(modelGroup);

      // Configurar OrbitControls para que el usuario mueva la cámara con el mouse.
      controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.rotateSpeed = 0.5;
      // Limitar la rotación horizontal (azimuth) entre -45° y 45°

      // Limitar el ángulo polar (vertical). Por ejemplo, entre 30° y 80° (medido desde el eje Y)
      controls.minPolarAngle = THREE.MathUtils.degToRad(45);
      controls.maxPolarAngle = THREE.MathUtils.degToRad(120);
      
      // Desactivar controles de zoom si se desea, o dejarlos activos
      // controls.enableZoom = true;

      window.addEventListener('resize', () => {
        const width = container.clientWidth;
        const height = container.clientHeight;
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        renderer.setSize(width, height);
      });

      animate();
    }

    function loadFBX(fbxPath, texturePath) {
      console.log("Cargando FBX desde:", fbxPath);
      console.log("Cargando textura desde:", texturePath);

      const textureLoader = new THREE.TextureLoader();
      const loader = new THREE.FBXLoader();

      textureLoader.load(texturePath, (texture) => {
        loader.load(fbxPath, (object) => {
          modelGroup.clear();
          console.log("FBX cargado, escalando y centrando...");

          object.scale.set(1, 1, 1);

          object.traverse(child => {
            if (child.isMesh) {
              child.material = new THREE.MeshStandardMaterial({
                map: texture,
                side: THREE.DoubleSide,
                metalness: 0.1,
                roughness: 0.8
              });
            }
          });

          // Ajustar la orientación por defecto si es necesario
          object.rotation.set(-Math.PI / 2, 0, 0);

          // Centrar el modelo: calcular el bounding box y desplazar para que esté en el origen
          const box = new THREE.Box3().setFromObject(object);
          const center = box.getCenter(new THREE.Vector3());
          object.position.sub(center);

          modelGroup.add(object);

          // Ajustar la cámara para que se vea todo el modelo
          const size = box.getSize(new THREE.Vector3());
          const maxDim = Math.max(size.x, size.y, size.z);
          const fovRadians = (camera.fov * Math.PI) / 180;
          let cameraZ = (maxDim / 2) / Math.tan(fovRadians / 2);
          cameraZ *= 2;
          baseDistance = cameraZ;
          camera.position.set(0, 0, cameraZ);
          camera.lookAt(new THREE.Vector3(0, 0, 0));
          // Actualizar OrbitControls con la nueva posición
          controls.update();
        }, undefined, (error) => {
          console.error("❌ Error al cargar FBX:", error);
        });
      }, undefined, (error) => {
        console.error("❌ Error al cargar la textura:", error);
      });
    }

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }
  </script>
</body>
</html>
